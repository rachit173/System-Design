// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    And(a=instruction[15],b=instruction[3],out=writeM);
    And(a=instruction[15],b=instruction[4],out=ld);
    Not(in=instruction[15],out=ni15);
    Or(a=ni15,b=instruction[5],out=la);
    Mux16(a=instruction,b=temp,sel=instruction[15],out=o1);
    ARegister(in=o1,load=la,out=o2,out[0..14]=addressM);
    Mux16(a=o2,b=inM,sel=instruction[12],out=o3);
    DRegister(in=temp,load=ld,out=o4);
    ALU(x=o4,y=o3,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],zr=zr,ng=ng,out=outM,out=temp);
    


    Not(in=ng,out=b1);
    Not(in=zr,out=b2);
    And(a=b1,b=b2,out=f1);
    And(a=instruction[0],b=f1,out=t1);
    And(a=instruction[1],b=zr,out=t2);
    And(a=instruction[2],b=ng,out=f2);
    And(a=f2,b=b2,out=t3);
    Or(a=t1,b=t2,out=m1);
    Or(a=m1,b=t3,out=m2);
    And(a=instruction[15],b=m2,out=PCload);

    //Not(in=instruction[0],out=n0);
    //Not(in=instruction[1],out=n1);
    //Not(in=instruction[2],out=n2);
    //And(a=n0,b=n1,out=c1);
    Not(in=PCload,out=notPCload);
    //And(a=n2,b=instruction[15],out=c2);
    //And(a=c1,b=c2,out=c3);
    Or(a=notPCload,b=ni15,out=PCinc);

    PC(in=o2,load=PCload,inc=PCinc,reset=reset,out[0..14]=pc);
}